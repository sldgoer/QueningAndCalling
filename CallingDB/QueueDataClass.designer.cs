#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CallingDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="queue")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQueue(Queue instance);
    partial void UpdateQueue(Queue instance);
    partial void DeleteQueue(Queue instance);
    partial void InsertQueueHist(QueueHist instance);
    partial void UpdateQueueHist(QueueHist instance);
    partial void DeleteQueueHist(QueueHist instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::CallingDB.Properties.Settings.Default.queueConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Queue> Queues
		{
			get
			{
				return this.GetTable<Queue>();
			}
		}
		
		public System.Data.Linq.Table<QueueHist> QueueHists
		{
			get
			{
				return this.GetTable<QueueHist>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Queue")]
	public partial class Queue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Q_Serial;
		
		private string _Q_number;
		
		private int _Q_counter;
		
		private System.DateTime _Q_cometime;
		
		private string _Q_mobile;
		
		private System.Nullable<bool> _Q_issms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQ_SerialChanging(int value);
    partial void OnQ_SerialChanged();
    partial void OnQ_numberChanging(string value);
    partial void OnQ_numberChanged();
    partial void OnQ_counterChanging(int value);
    partial void OnQ_counterChanged();
    partial void OnQ_cometimeChanging(System.DateTime value);
    partial void OnQ_cometimeChanged();
    partial void OnQ_mobileChanging(string value);
    partial void OnQ_mobileChanged();
    partial void OnQ_issmsChanging(System.Nullable<bool> value);
    partial void OnQ_issmsChanged();
    #endregion
		
		public Queue()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Q_Serial", DbType="Int NOT NULL")]
		public int Q_Serial
		{
			get
			{
				return this._Q_Serial;
			}
			set
			{
				if ((this._Q_Serial != value))
				{
					this.OnQ_SerialChanging(value);
					this.SendPropertyChanging();
					this._Q_Serial = value;
					this.SendPropertyChanged("Q_Serial");
					this.OnQ_SerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Q_number", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Q_number
		{
			get
			{
				return this._Q_number;
			}
			set
			{
				if ((this._Q_number != value))
				{
					this.OnQ_numberChanging(value);
					this.SendPropertyChanging();
					this._Q_number = value;
					this.SendPropertyChanged("Q_number");
					this.OnQ_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Q_counter", DbType="Int NOT NULL")]
		public int Q_counter
		{
			get
			{
				return this._Q_counter;
			}
			set
			{
				if ((this._Q_counter != value))
				{
					this.OnQ_counterChanging(value);
					this.SendPropertyChanging();
					this._Q_counter = value;
					this.SendPropertyChanged("Q_counter");
					this.OnQ_counterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Q_cometime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Q_cometime
		{
			get
			{
				return this._Q_cometime;
			}
			set
			{
				if ((this._Q_cometime != value))
				{
					this.OnQ_cometimeChanging(value);
					this.SendPropertyChanging();
					this._Q_cometime = value;
					this.SendPropertyChanged("Q_cometime");
					this.OnQ_cometimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Q_mobile", DbType="VarChar(20)")]
		public string Q_mobile
		{
			get
			{
				return this._Q_mobile;
			}
			set
			{
				if ((this._Q_mobile != value))
				{
					this.OnQ_mobileChanging(value);
					this.SendPropertyChanging();
					this._Q_mobile = value;
					this.SendPropertyChanged("Q_mobile");
					this.OnQ_mobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Q_issms", DbType="Bit")]
		public System.Nullable<bool> Q_issms
		{
			get
			{
				return this._Q_issms;
			}
			set
			{
				if ((this._Q_issms != value))
				{
					this.OnQ_issmsChanging(value);
					this.SendPropertyChanging();
					this._Q_issms = value;
					this.SendPropertyChanged("Q_issms");
					this.OnQ_issmsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QueueHist")]
	public partial class QueueHist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _H_Serial;
		
		private string _H_number;
		
		private int _H_counter;
		
		private System.DateTime _H_cometime;
		
		private System.DateTime _H_servetime;
		
		private string _H_serveno;
		
		private System.DateTime _H_endtime;
		
		private bool _H_isdo;
		
		private bool _H_issend;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnH_SerialChanging(int value);
    partial void OnH_SerialChanged();
    partial void OnH_numberChanging(string value);
    partial void OnH_numberChanged();
    partial void OnH_counterChanging(int value);
    partial void OnH_counterChanged();
    partial void OnH_cometimeChanging(System.DateTime value);
    partial void OnH_cometimeChanged();
    partial void OnH_servetimeChanging(System.DateTime value);
    partial void OnH_servetimeChanged();
    partial void OnH_servenoChanging(string value);
    partial void OnH_servenoChanged();
    partial void OnH_endtimeChanging(System.DateTime value);
    partial void OnH_endtimeChanged();
    partial void OnH_isdoChanging(bool value);
    partial void OnH_isdoChanged();
    partial void OnH_issendChanging(bool value);
    partial void OnH_issendChanged();
    #endregion
		
		public QueueHist()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H_Serial", DbType="Int NOT NULL")]
		public int H_Serial
		{
			get
			{
				return this._H_Serial;
			}
			set
			{
				if ((this._H_Serial != value))
				{
					this.OnH_SerialChanging(value);
					this.SendPropertyChanging();
					this._H_Serial = value;
					this.SendPropertyChanged("H_Serial");
					this.OnH_SerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H_number", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string H_number
		{
			get
			{
				return this._H_number;
			}
			set
			{
				if ((this._H_number != value))
				{
					this.OnH_numberChanging(value);
					this.SendPropertyChanging();
					this._H_number = value;
					this.SendPropertyChanged("H_number");
					this.OnH_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H_counter", DbType="Int NOT NULL")]
		public int H_counter
		{
			get
			{
				return this._H_counter;
			}
			set
			{
				if ((this._H_counter != value))
				{
					this.OnH_counterChanging(value);
					this.SendPropertyChanging();
					this._H_counter = value;
					this.SendPropertyChanged("H_counter");
					this.OnH_counterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H_cometime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime H_cometime
		{
			get
			{
				return this._H_cometime;
			}
			set
			{
				if ((this._H_cometime != value))
				{
					this.OnH_cometimeChanging(value);
					this.SendPropertyChanging();
					this._H_cometime = value;
					this.SendPropertyChanged("H_cometime");
					this.OnH_cometimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H_servetime", DbType="DateTime NOT NULL")]
		public System.DateTime H_servetime
		{
			get
			{
				return this._H_servetime;
			}
			set
			{
				if ((this._H_servetime != value))
				{
					this.OnH_servetimeChanging(value);
					this.SendPropertyChanging();
					this._H_servetime = value;
					this.SendPropertyChanged("H_servetime");
					this.OnH_servetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H_serveno", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string H_serveno
		{
			get
			{
				return this._H_serveno;
			}
			set
			{
				if ((this._H_serveno != value))
				{
					this.OnH_servenoChanging(value);
					this.SendPropertyChanging();
					this._H_serveno = value;
					this.SendPropertyChanged("H_serveno");
					this.OnH_servenoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H_endtime", DbType="DateTime NOT NULL")]
		public System.DateTime H_endtime
		{
			get
			{
				return this._H_endtime;
			}
			set
			{
				if ((this._H_endtime != value))
				{
					this.OnH_endtimeChanging(value);
					this.SendPropertyChanging();
					this._H_endtime = value;
					this.SendPropertyChanged("H_endtime");
					this.OnH_endtimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H_isdo", DbType="Bit NOT NULL")]
		public bool H_isdo
		{
			get
			{
				return this._H_isdo;
			}
			set
			{
				if ((this._H_isdo != value))
				{
					this.OnH_isdoChanging(value);
					this.SendPropertyChanging();
					this._H_isdo = value;
					this.SendPropertyChanged("H_isdo");
					this.OnH_isdoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H_issend", DbType="Bit NOT NULL")]
		public bool H_issend
		{
			get
			{
				return this._H_issend;
			}
			set
			{
				if ((this._H_issend != value))
				{
					this.OnH_issendChanging(value);
					this.SendPropertyChanging();
					this._H_issend = value;
					this.SendPropertyChanged("H_issend");
					this.OnH_issendChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
